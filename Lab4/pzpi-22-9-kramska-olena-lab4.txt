Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії





ЗВІТ
з лабораторної роботи №4
з дисципліни «Архітектура програмного забезпечення»
з теми «Масштабування бекенда»






Виконала:                                                                                        Перевірив:
ст. гр. ПЗПІ-22-9                                                                             Дашенков Д. С.
Крамська Олена







Харків 2025
4 Масштабування бекенда

1. Мета роботи
Показати як можна масштабувати бекенд системи для роботи із великим навантаженням
2. Хід роботи
2.1	Опис стратегії масштабування системи
Було реалізовано горизонтальне масштабування серверної частини за допомогою запуску 3-х копій Node.js серверу, що використовують однаковий код та підключаються до спільної бази даних, на різних портах командами:
	$env:PORT=3000; node server/index.js
	$env:PORT=3001; node server/index.js
	$env:PORT=3002; node server/index.js

2.2	Опис технічних рішень
У рамках реалізації горизонтального масштабування було запущено три копії бекенд-сервера на Node.js з використанням Express.js. Запуск кожної копії здійснювався на окремому порту (3000, 3001, 3002) за допомогою передачі змінної середовища PORT. Всі сервери підключались до однієї бази даних, що дозволило забезпечити єдину точку збереження та обробки даних. 
Навантаження на систему здійснювалося за допомогою Apache JMeter, де для кожної копії серверу було налаштовано аналогічні HTTP-запити до основних API-роутів (/api/containers, /api/reports, /api/users, /api/recipes, /api/sensors). 
 
Рисунок 1 – налаштування

У результаті цього підходу було створено повноцінне тестове середовище, що імітує роботу системи в умовах паралельного обслуговування великої кількості запитів на кількох інстансах серверу.

2.3	Аналіз вузьких місць
Потенційно вичерпними ресурсами при масштабуванні є:
-	кількість з’єднань із базою даних
-	навантаження на оперативну памʼять та процесор
-	пропускна здатність мережі
У тестуванні вузьких місць не зафіксовано. Усі запущені сервери працювали стабільно, без помилок і затримок.
2.4	 Опис навантажувальних тестів
Було запущено три копії серверу (на портах 3000, 3001, 3002) та виконано 2000 запитів через JMeter.
Для кожної копії були налаштовані окремі HTTP-запити.
 
Рисунок 2 – приклад налаштувань окремого запиту

Результати тестування показали, що система успішно витримує навантаження без втрат продуктивності, що підтверджує ефективність горизонтального масштабування.
Рисунок 3 – результати тестування

Висновки: Під час лабораторної роботи було реалізовано горизонтальне масштабування серверу Node.js шляхом запуску кількох копій на різних портах. Проведене навантажувальне тестування за допомогою Apache JMeter підтвердило стабільну роботу системи при великій кількості запитів без помилок, що свідчить про ефективність обраного підходу до масштабування.
